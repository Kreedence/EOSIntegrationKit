// Copyright (C) 2024 Betide Studio. All Rights Reserved.
// Written by AvnishGameDev.

#include "GoogleOneTap/GoogleLogout_SLK.h"
#include "Async/Async.h"

#if PLATFORM_ANDROID
#include "Android/AndroidApplication.h"
#include "Android/AndroidJNI.h" 
#include "Android/Utils/AndroidJNICallUtils.h"
#include "Android/Utils/AndroidJNIConvertor.h"
#include "Runtime/Core/Public/Async/TaskGraphInterfaces.h"

#define INIT_JAVA_METHOD(name, signature) \
if (JNIEnv* Env = FAndroidApplication::GetJavaEnv(true)) { \
name = FJavaWrapper::FindMethod(Env, FJavaWrapper::GameActivityClassID, #name, signature, false); \
check(name != NULL); \
} else { \
check(0); \
}

#define DECLARE_JAVA_METHOD(name) \
static jmethodID name = NULL;

DECLARE_JAVA_METHOD(AndroidThunkJava_GoogleSubsystem_SignOut);
#endif

#if PLATFORM_IOS
#define GTM_APPAUTH_SKIP_GOOGLE_SUPPORT 0
#define GTMSESSION_ASSERT_AS_LOG 1

#pragma clang diagnostic ignored "-Wobjc-property-no-attribute" // Ignore errors generated by FBSDKCoreKit.h and GoogleSignIn.h
#import <Foundation/Foundation.h>
#include "IOSAppDelegate.h"
#import <GoogleSignIn/GoogleSignIn.h>
#import <AuthenticationServices/AuthenticationServices.h>
#import <SafariServices/SafariServices.h>
#endif

TWeakObjectPtr<UGoogleLogout_SLK> UGoogleLogout_SLK::staticInstance = nullptr;

UGoogleLogout_SLK* UGoogleLogout_SLK::GoogleLogout(UObject* WorldContextObject)
{
	UGoogleLogout_SLK* Action = NewObject<UGoogleLogout_SLK>();
	return Action;
}

void UGoogleLogout_SLK::Activate()
{
	UGoogleLogout_SLK::staticInstance = this;

#if PLATFORM_ANDROID
	INIT_JAVA_METHOD(AndroidThunkJava_GoogleSubsystem_SignOut, "()V");
#endif
	
	GoogleLogoutLocal();
	Super::Activate();
}

void UGoogleLogout_SLK::BeginDestroy()
{
	UGoogleLogout_SLK::staticInstance = nullptr;
	Super::BeginDestroy();
}

void UGoogleLogout_SLK::GoogleLogoutLocal()
{
#if PLATFORM_ANDROID
	if (JNIEnv* Env = FAndroidApplication::GetJavaEnv(true))
	{
		FJavaWrapper::CallVoidMethod(Env, FJavaWrapper::GameActivityThis, AndroidThunkJava_GoogleSubsystem_SignOut);
	}
	return;
#endif
#if PLATFORM_IOS
	[[GIDSignIn sharedInstance] signOut];
	UGoogleLogout_SLK::staticInstance.Get()->Success.Broadcast("Logout Success");
	return;
#endif
	UGoogleLogout_SLK::staticInstance.Get()->Failure.Broadcast("Platform not supported!");
}

#if PLATFORM_ANDROID
extern "C"
{
	JNIEXPORT void Java_com_epicgames_unreal_GameActivity_OnSignOutResult(JNIEnv* env, jclass clazz, jboolean success, jstring response)
	{
		FString responseStr = AndroidJNIConvertor::FromJavaString(response);
		if (UGoogleLogout_SLK::staticInstance.Get())
		{
			AsyncTask(ENamedThreads::GameThread, [success, responseStr]() {
				if (success)
				{
					UGoogleLogout_SLK::staticInstance.Get()->Success.Broadcast(responseStr);
				}
				else
				{
					UGoogleLogout_SLK::staticInstance.Get()->Failure.Broadcast(responseStr);
				}
			});
		}
	}
}
#endif
